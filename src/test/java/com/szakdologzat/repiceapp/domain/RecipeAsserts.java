package com.szakdologzat.repiceapp.domain;

import static com.szakdologzat.repiceapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

import java.time.temporal.ChronoUnit;

public class RecipeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeAllPropertiesEquals(Recipe expected, Recipe actual) {
        assertRecipeAutoGeneratedPropertiesEquals(expected, actual);
        assertRecipeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeAllUpdatablePropertiesEquals(Recipe expected, Recipe actual) {
        assertRecipeUpdatableFieldsEquals(expected, actual);
        assertRecipeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeAutoGeneratedPropertiesEquals(Recipe expected, Recipe actual) {
        assertThat(expected)
            .as("Verify Recipe auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeUpdatableFieldsEquals(Recipe expected, Recipe actual) {
        assertThat(expected)
            .as("Verify Recipe relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getIngredientNames()).as("check ingredientNames").isEqualTo(actual.getIngredientNames()))
            .satisfies(e -> assertThat(e.getFoodCategory()).as("check foodCategory").isEqualTo(actual.getFoodCategory()))
            .satisfies(e -> assertThat(e.getFoodType()).as("check foodType").isEqualTo(actual.getFoodType()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecipeUpdatableRelationshipsEquals(Recipe expected, Recipe actual) {
        // empty method
    }
}
